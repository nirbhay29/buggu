<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Happy Birthday Love ‚ù§Ô∏è</title>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Pacifico&family=Roboto:wght@400;700&display=swap" rel="stylesheet">
  <style>
    :root {
      /* Define CSS variables for easier theming */
      --primary-color: #ff4d6d;
      --secondary-color: #e60039;
      --text-color-dark: #444;
      --background-gradient-start: #ffe6e6;
      --background-gradient-end: #ffe0f0;
      --border-radius-btn: 25px;
      --border-radius-img: 20px;
      --shadow-light: 0 4px 8px rgba(0,0,0,0.2);
    }

    body {
      margin: 0;
      padding: 0;
      font-family: 'Roboto', sans-serif; /* Using a more modern sans-serif font */
      background: linear-gradient(to top right, var(--background-gradient-start), var(--background-gradient-end));
      overflow-x: hidden;
      min-height: 100vh; /* Ensure body takes full viewport height */
      display: flex;
      flex-direction: column;
      justify-content: center; /* Center content vertically */
      align-items: center; /* Center content horizontally */
    }

    .container {
      text-align: center;
      padding: 40px 20px; /* Adjust padding for smaller screens */
      max-width: 800px; /* Max width for better readability on large screens */
      width: 90%; /* Responsive width */
    }

    h1 {
      font-family: 'Pacifico', cursive; /* A more thematic font for the main heading */
      font-size: 3.5em; /* Slightly larger heading */
      color: var(--primary-color);
      margin-bottom: 15px;
      line-height: 1.2;
    }

    p {
      font-size: 1.2em;
      color: var(--text-color-dark);
      max-width: 600px;
      margin: 20px auto 30px auto; /* More space below paragraph */
    }

    .btn {
      padding: 15px 30px; /* Larger button for better clickability */
      background: var(--primary-color);
      color: white;
      border: none;
      border-radius: var(--border-radius-btn);
      font-size: 1.1em;
      cursor: pointer;
      transition: background 0.3s ease, transform 0.2s ease; /* Add transform transition */
      box-shadow: var(--shadow-light); /* Add shadow to button */
    }

    .btn:hover {
      background: var(--secondary-color);
      transform: translateY(-2px); /* Subtle lift effect on hover */
    }

    .btn:active {
      transform: translateY(0); /* Press effect */
    }

    .gallery {
      margin-top: 50px; /* More space above gallery */
      display: flex; /* Use flexbox for image layout */
      flex-wrap: wrap; /* Allow images to wrap to next line */
      justify-content: center; /* Center images horizontally */
      gap: 20px; /* Space between images */
    }

    .gallery img {
      width: 280px; /* Slightly larger images */
      height: 350px; /* Maintain aspect ratio or adjust as needed */
      object-fit: cover; /* Ensures images cover the area without distortion */
      margin: 0; /* Reset margin from flexbox gap */
      border-radius: var(--border-radius-img);
      box-shadow: var(--shadow-light);
      transition: transform 0.3s ease; /* Smooth hover effect */
    }

    .gallery img:hover {
      transform: scale(1.03); /* Slight zoom on hover */
    }

    .hidden {
      display: none;
    }

    .confetti-canvas { /* Renamed for clarity */
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      pointer-events: none;
      z-index: 9999;
    }

    /* Media queries for responsiveness */
    @media (max-width: 768px) {
      h1 {
        font-size: 2.8em;
      }
      p {
        font-size: 1.1em;
      }
      .btn {
        padding: 12px 25px;
        font-size: 1em;
      }
      .gallery img {
        width: 200px;
        height: 250px;
      }
    }

    @media (max-width: 480px) {
      h1 {
        font-size: 2.2em;
      }
      p {
        font-size: 1em;
        margin: 15px auto 20px auto;
      }
      .container {
        padding: 30px 15px;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>Happy Birthday My Love! üéâ</h1>
    <p>From the moment I saw you, I knew you were special. On your birthday, I just want to remind you how deeply I love you. You are the sunshine of my life, my girl, my everything. üíñ</p>
    <button class="btn" id="surpriseButton">Open Your Surprise üéÅ</button>

    <div class="gallery hidden" id="gallery">
      <h2>Our Beautiful Moments üíë</h2>
      <!-- Replace these with your actual image paths -->
      <img src="https://via.placeholder.com/280x350?text=Your+Memory+1" alt="Memory 1">
      <img src="https://via.placeholder.com/280x350?text=Your+Memory+2" alt="Memory 2">
      <img src="https://via.placeholder.com/280x350?text=Your+Memory+3" alt="Memory 3">
      <img src="https://via.placeholder.com/280x350?text=Your+Memory+4" alt="Memory 4">
    </div>
  </div>

  <canvas class="confetti-canvas" id="confetti-canvas"></canvas>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const surpriseButton = document.getElementById('surpriseButton');
      const gallery = document.getElementById('gallery');
      const canvas = document.getElementById('confetti-canvas');
      const ctx = canvas.getContext('2d');

      // Confetti settings
      const confettiCount = 200; // Increased confetti count
      const confetti = [];
      let animationIntervalId;

      // Function to initialize canvas size
      function setCanvasSize() {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
      }

      // Initialize canvas size on load and resize
      setCanvasSize();
      window.addEventListener('resize', setCanvasSize);

      // Create confetti particles
      function createConfetti() {
        for (let i = 0; i < confettiCount; i++) {
          confetti.push({
            x: Math.random() * canvas.width,
            y: Math.random() * canvas.height - canvas.height, // Start above the screen
            r: Math.random() * 5 + 3, // Smaller size variation
            d: Math.random() * 100,
            color: `hsl(${Math.random() * 360}, 100%, 70%)`,
            tilt: Math.floor(Math.random() * 20) - 10,
            velocity: Math.random() * 3 + 1, // Add velocity for more dynamic fall
            opacity: 1
          });
        }
      }

      function drawConfetti() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        confetti.forEach(c => {
          ctx.beginPath();
          ctx.lineWidth = c.r / 2;
          ctx.strokeStyle = `hsla(${c.color.split('(')[1].split(',')[0]}, 100%, 70%, ${c.opacity})`;
          ctx.moveTo(c.x + c.tilt + c.r / 4, c.y);
          ctx.lineTo(c.x + c.tilt, c.y + c.tilt + c.r / 4);
          ctx.stroke();
        });
        updateConfetti();
      }

      function updateConfetti() {
        confetti.forEach((c, index) => {
          c.y += c.velocity + Math.cos(c.d * 0.01) * 0.5; // Smoother fall with slight wobble
          c.x += Math.sin(c.d * 0.005) * 1; // Horizontal drift

          if (c.y > canvas.height) {
            // Reset confetti when it goes off screen
            confetti[index] = {
              x: Math.random() * canvas.width,
              y: -c.r, // Reset just above the top
              r: Math.random() * 5 + 3,
              d: Math.random() * 100,
              color: `hsl(${Math.random() * 360}, 100%, 70%)`,
              tilt: Math.floor(Math.random() * 20) - 10,
              velocity: Math.random() * 3 + 1,
              opacity: 1
            };
          }
        });
      }

      function startConfetti() {
        if (!animationIntervalId) { // Prevent multiple intervals
          createConfetti(); // Create confetti particles when starting
          animationIntervalId = setInterval(drawConfetti, 20); // About 50 FPS
        }
      }

      function revealSurprise() {
        gallery.classList.remove('hidden'); // Use class for toggling visibility
        startConfetti();
        surpriseButton.removeEventListener('click', revealSurprise); // Remove listener after first click
        surpriseButton.style.display = 'none'; // Optionally hide the button after click
      }

      // Event listener for the button
      surpriseButton.addEventListener('click', revealSurprise);
    });
  </script>
</body>
</html>
